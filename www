#!/usr/bin/env node

/**
 * Module dependencies.
 */

var serverDirectory = __dirname + '/src/server';
var debug = require('debug');

var bitcannon = require('./src/bitcannon')(__dirname + '/config.json');

//To do:
// * Add more debug levels - At the moment we just have basic error messages, stacktraces and debug output from express
switch (bitcannon.config.debugLevel()) {
    case 2:
        debug.enable('express:*'); //Detailed output from the express web server
    case 1:
        //Detailed error messages e.g stacktraces
    case 0:
        //Default logging i.e error messages only
    default:
        break;
}

//Enable debugging for the bitcannon server
debug.enable('bitcannon:server');

debug = debug('bitcannon:server');

bitcannon.log("Connecting to " + bitcannon.database.name);

bitcannon.database.test(function(err) {
    if(err) {
        bitcannon.error("[ERR] I'm sorry! I Couldn't connect to "+ bitcannon.database.name + ".");
        bitcannon.error("Please make sure it is installed and running.");
        bitcannon.exit(1);
    } else {
        //Start the task scheduler for archive providers
    }
});

var app = require(serverDirectory + '/main');

app.disable('x-powered-by');

var http = require('http');

/**
 * Get port from environment and store in Express.
 */
var port = normalizePort(bitcannon.config.bitcannonPort());
var address = bitcannon.config.bitcannonBindIp();
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port,address);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + address + ':' + port);
  debug('[OK!] BitCannon is live at http://' + ((address == '0.0.0.0') ? '127.0.0.1' : address) + ':' + port + '/');
}
