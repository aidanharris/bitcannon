#!/usr/bin/env node

'use strict';

if (
    process.env.NODE_ENV !== 'production' &&
    typeof(process.versions['atom-shell']) !== 'string'
) {
  try {
    // Verbose stack traces
    require('longjohn');
  } catch (err) {
    console.warn('Error loading longjohn');
    console.warn(err);
    console.warn(err.message);
  }
  /* jshint ignore:start */
  /* eslint-disable no-unused-vars */
  try {
    // Allows dumping the heap (dumps can be viewed in chrome dev tools)
    // To produce a dump use `kill -USR 2 pid` on a UNIX like OS or manually
    // trigger one in node.js using heapdump.writeSnapshot()
    const heapdump = require('heapdump');
  } catch (err) {
    console.warn('Error loading heapdump');
    console.warn(err);
    console.warn(err.message);
  }
  /* eslint-enable no-unused-vars */
  /* jshint ignore:end */
}

/**
 * Module dependencies.
 */

const SERVER_DIRECTORY = __dirname + '/src/server';
let debug = require('./src/server/node_modules/debug');
let error = require('./src/server/node_modules/debug');
let app;
let server;
let http;
let port;
let address;

const CONFIG_FILE = 'config.json';

const CONFIG_FILE_LOCATION = (
    typeof(process.versions['atom-shell']) !== 'string'
  ) ? __dirname + '/' + CONFIG_FILE :
  __dirname + '/../../' + CONFIG_FILE;

const bitcannon = require('./src/bitcannon/bitcannon-core')(
    CONFIG_FILE_LOCATION
);

// Handle application exit
process.once('SIGINT', function () {
  process.exit(0);
});

process.once('exit', function (exitCode) {
  bitcannon.exit(((typeof(exitCode) === 'number') ? exitCode : 0));
});

if (bitcannon.config.debugLevel() > 2) {
  debug.enable('express:*'); // Detailed output from the express web server
}

// Enable debugging for the bitcannon server
debug.enable('bitcannon:server');
debug.enable('bitcannon:server:error');

debug = debug('bitcannon:server');
error = error('bitcannon:server:error');

bitcannon.log('Connecting to ' + bitcannon.database.name);

bitcannon.database.test(function (err) {
  if (err) {
    bitcannon.error(
      '[ERR] I\'m sorry! I Couldn\'t connect to ' +
      bitcannon.database.name +
      '.'
    );
    bitcannon.error('Please make sure it is installed and running.');
    bitcannon.exit(1);
  } else {
    try {
      if (bitcannon.config.openBrowser() !== 'false') {
        require('./src/bitcannon/node_modules/opener')('http://' +
            ((address === '0.0.0.0') ? '127.0.0.1' : address) +
            ':' + port + '/');
      }
    } catch (err) {
      bitcannon.error('Failed to open browser!');
      bitcannon.error(err);
      bitcannon.error(err.message);
    }
    // Start the task scheduler for archive providers
    bitcannon.tasks.start();
  }
});

app = require(SERVER_DIRECTORY + '/main');

// Disable x-powered-by so that express does not
// show up in HTTP response headers.
app.disable('x-powered-by');

http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const PORT = parseInt(val, 10);

  if (isNaN(PORT)) {
    // named pipe
    return val;
  }

  if (PORT >= 0) {
    // port number
    return PORT;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
port = normalizePort(bitcannon.config.bitcannonPort());
address = bitcannon.config.bitcannonBindIp();
app.set('port', port);

/**
 * Create HTTP server.
 */

server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(err) {
  let bind;
  if (err.syscall !== 'listen') {
    throw err;
  }

  bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (err.code) {
    case 'EACCES':
      error(bind + ' requires elevated privileges');
      bitcannon.exit(1);
      break;
    case 'EADDRINUSE':
      error(bind + ' is already in use');
      bitcannon.exit(1);
      break;
    default:
      throw err;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on ' + address + ':' + port);
  debug(
    '[OK!] bitcannon is live at http://' +
    ((address === '0.0.0.0') ? '127.0.0.1' : address) +
    ':' + port + '/'
  );
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, address);
server.on('error', onError);
server.on('listening', onListening);
