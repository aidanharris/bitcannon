#!/usr/bin/env node

'use strict';

/**
 * Module dependencies.
 */

const serverDirectory = __dirname + '/src/server';
let debug = require('./src/server/node_modules/debug');
let error = require('./src/server/node_modules/debug');
let app;
let server;
let http;
let port;
let address;

const bitcannon = require('./src/bitcannon')(__dirname + '/config.json');

if (bitcannon.config.debugLevel() > 1) {
  debug. enable('express:*'); // Detailed output from the express web server
}

// Enable debugging for the bitcannon server
debug.enable('bitcannon:server');
debug.enable('bitcannon:server:error');

debug = debug('bitcannon:server');
error = error('bitcannon:server:error');

bitcannon.log('Connecting to ' + bitcannon.database.name);

bitcannon.database.test(function (err) {
  if (err) {
    bitcannon.error(
      '[ERR] I\'m sorry! I Couldn\'t connect to ' +
      bitcannon.database.name +
      '.'
    );
    bitcannon.error('Please make sure it is installed and running.');
    bitcannon.exit(1);
  } else {
    // Start the task scheduler for archive providers
    bitcannon.tasks.start();
  }
});

app = require(serverDirectory + '/main');

app.disable('x-powered-by');

http = require('http');

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Get port from environment and store in Express.
 */
port = normalizePort(bitcannon.config.bitcannonPort());
address = bitcannon.config.bitcannonBindIp();
app.set('port', port);

/**
 * Create HTTP server.
 */

server = http.createServer(app);

/**
 * Event listener for HTTP server "error" event.
 */

function onError(err) {
  let bind;
  if (err.syscall !== 'listen') {
    throw err;
  }

  bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (err.code) {
    case 'EACCES':
      error(bind + ' requires elevated privileges');
      bitcannon.exit(1);
      break;
    case 'EADDRINUSE':
      error(bind + ' is already in use');
      bitcannon.exit(1);
      break;
    default:
      throw err;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  debug('Listening on ' + address + ':' + port);
  debug(
    '[OK!] BitCannon is live at http://' +
    ((address === '0.0.0.0') ? '127.0.0.1' : address) +
    ':' + port + '/'
  );
}


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, address);
server.on('error', onError);
server.on('listening', onListening);
